<div class="row mb-3">
    <div class="col">
        <select class="btn btn-toolbar border dropdown-toggle" @onchange="ChangeTableStyle">
            <option selected value="">Choose Table Style</option>
            @foreach (var item in AppStyle.TableStyle)
            {
                <option value="@item.Value">@item.Text</option>
            }
     
        </select>
    </div>
</div>

<div class="table-responsive">
    <table class="table @currentTableStyle">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Genre</th>
                <th>Release Date</th>
                <th><input type="checkbox" @bind="displayButtons" /> Delete</th>
            </tr>
        </thead>
        <tbody>
            @*Calling Generic Item through tags and specifying that we'll be using Games List.*@

            <GenericList ListOfItems="Games">
                <ItemTemplate Context="game">
                    <IndividualGame Game="game" IsTable="true" DisplayButtons="displayButtons" DeleteGame="DeleteTheGame" />
                </ItemTemplate>
            </GenericList>

            <Confirmation @ref="confirmation" onCancel="OnCancel" onConfirm="OnConfirm">
                <div class="text-danger">
                    Do you wish to delete "@gameToBeDeleted.Name"?
                </div>
            </Confirmation>
        </tbody>
    </table>
</div>

@code {
    [Parameter] public List<Game> Games { get; set; }

    bool displayButtons = false;

    void DeleteTheGame(Game game)
    {
        gameToBeDeleted = game;
        confirmation.Show();
    }

    /* --------------------------------------------------- */

    protected override void OnInitialized()
    {
        Console.WriteLine($"1. OnInitialized(). Games count: {Games?.Count}.");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"2. OnParametersSet(). Games count: {Games?.Count}.");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"3. OnAfterRender(bool firstRender). First render : {firstRender}");
    }

    //public void DoSomething()
    //{
    // Some logic
    //}


    Confirmation confirmation;

    Game gameToBeDeleted;

    void OnConfirm()
    {
        Games.Remove(gameToBeDeleted);
        confirmation.Hide();
        gameToBeDeleted = null;
    }

    void OnCancel()
    {
        confirmation.Hide();
        gameToBeDeleted = null;
    }

    [CascadingParameter] public AppStyle AppStyle { get; set; }
    string currentTableStyle = "table-striped";

    // Changing table style parameter

    void ChangeTableStyle(ChangeEventArgs currentItem)
    {
        currentTableStyle = currentItem.Value.ToString();
    }
}
